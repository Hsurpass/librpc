// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto;
namespace xrpc {
class RpcMessage;
struct RpcMessageDefaultTypeInternal;
extern RpcMessageDefaultTypeInternal _RpcMessage_default_instance_;
class SubScribeRequest;
struct SubScribeRequestDefaultTypeInternal;
extern SubScribeRequestDefaultTypeInternal _SubScribeRequest_default_instance_;
class SubScribeResponse;
struct SubScribeResponseDefaultTypeInternal;
extern SubScribeResponseDefaultTypeInternal _SubScribeResponse_default_instance_;
}  // namespace xrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::xrpc::RpcMessage* Arena::CreateMaybeMessage<::xrpc::RpcMessage>(Arena*);
template<> ::xrpc::SubScribeRequest* Arena::CreateMaybeMessage<::xrpc::SubScribeRequest>(Arena*);
template<> ::xrpc::SubScribeResponse* Arena::CreateMaybeMessage<::xrpc::SubScribeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace xrpc {

enum MessageType : int {
  NONE = 0,
  REQUEST = 1,
  RESPONSE = 2,
  NOTIFY = 3,
  ERROR = 4,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = NONE;
constexpr MessageType MessageType_MAX = ERROR;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum ErrorCode : int {
  NO_ERROR = 0,
  WRONG_PROTO = 1,
  NO_SERVICE = 2,
  NO_METHOD = 3,
  INVALID_REQUEST = 4,
  INVALID_RESPONSE = 5,
  TIMEOUT = 6,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = NO_ERROR;
constexpr ErrorCode ErrorCode_MAX = TIMEOUT;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class SubScribeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xrpc.SubScribeRequest) */ {
 public:
  inline SubScribeRequest() : SubScribeRequest(nullptr) {}
  ~SubScribeRequest() override;
  explicit PROTOBUF_CONSTEXPR SubScribeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubScribeRequest(const SubScribeRequest& from);
  SubScribeRequest(SubScribeRequest&& from) noexcept
    : SubScribeRequest() {
    *this = ::std::move(from);
  }

  inline SubScribeRequest& operator=(const SubScribeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubScribeRequest& operator=(SubScribeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubScribeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubScribeRequest* internal_default_instance() {
    return reinterpret_cast<const SubScribeRequest*>(
               &_SubScribeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SubScribeRequest& a, SubScribeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubScribeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubScribeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubScribeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubScribeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubScribeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubScribeRequest& from) {
    SubScribeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubScribeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xrpc.SubScribeRequest";
  }
  protected:
  explicit SubScribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSubscribeFieldNumber = 1,
  };
  // bool isSubscribe = 1;
  void clear_issubscribe();
  bool issubscribe() const;
  void set_issubscribe(bool value);
  private:
  bool _internal_issubscribe() const;
  void _internal_set_issubscribe(bool value);
  public:

  // @@protoc_insertion_point(class_scope:xrpc.SubScribeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool issubscribe_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SubScribeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xrpc.SubScribeResponse) */ {
 public:
  inline SubScribeResponse() : SubScribeResponse(nullptr) {}
  ~SubScribeResponse() override;
  explicit PROTOBUF_CONSTEXPR SubScribeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubScribeResponse(const SubScribeResponse& from);
  SubScribeResponse(SubScribeResponse&& from) noexcept
    : SubScribeResponse() {
    *this = ::std::move(from);
  }

  inline SubScribeResponse& operator=(const SubScribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubScribeResponse& operator=(SubScribeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubScribeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubScribeResponse* internal_default_instance() {
    return reinterpret_cast<const SubScribeResponse*>(
               &_SubScribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SubScribeResponse& a, SubScribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubScribeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubScribeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubScribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubScribeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SubScribeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SubScribeResponse& from) {
    SubScribeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubScribeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xrpc.SubScribeResponse";
  }
  protected:
  explicit SubScribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscribeResponseFieldNumber = 1,
  };
  // string subscribeResponse = 1;
  void clear_subscriberesponse();
  const std::string& subscriberesponse() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subscriberesponse(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subscriberesponse();
  PROTOBUF_NODISCARD std::string* release_subscriberesponse();
  void set_allocated_subscriberesponse(std::string* subscriberesponse);
  private:
  const std::string& _internal_subscriberesponse() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscriberesponse(const std::string& value);
  std::string* _internal_mutable_subscriberesponse();
  public:

  // @@protoc_insertion_point(class_scope:xrpc.SubScribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscriberesponse_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RpcMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:xrpc.RpcMessage) */ {
 public:
  inline RpcMessage() : RpcMessage(nullptr) {}
  ~RpcMessage() override;
  explicit PROTOBUF_CONSTEXPR RpcMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RpcMessage(const RpcMessage& from);
  RpcMessage(RpcMessage&& from) noexcept
    : RpcMessage() {
    *this = ::std::move(from);
  }

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RpcMessage& operator=(RpcMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RpcMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RpcMessage* internal_default_instance() {
    return reinterpret_cast<const RpcMessage*>(
               &_RpcMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RpcMessage& a, RpcMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RpcMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RpcMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RpcMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RpcMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RpcMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RpcMessage& from) {
    RpcMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "xrpc.RpcMessage";
  }
  protected:
  explicit RpcMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 3,
    kMethodFieldNumber = 4,
    kRequestFieldNumber = 5,
    kResponseFieldNumber = 6,
    kErrorMessageFieldNumber = 8,
    kNotifyMsgFieldNumber = 9,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 1,
    kErrorFieldNumber = 7,
  };
  // string service = 3;
  void clear_service();
  const std::string& service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_service();
  PROTOBUF_NODISCARD std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // string method = 4;
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // bytes request = 5;
  void clear_request();
  const std::string& request() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request();
  PROTOBUF_NODISCARD std::string* release_request();
  void set_allocated_request(std::string* request);
  private:
  const std::string& _internal_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request(const std::string& value);
  std::string* _internal_mutable_request();
  public:

  // bytes response = 6;
  void clear_response();
  const std::string& response() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response();
  PROTOBUF_NODISCARD std::string* release_response();
  void set_allocated_response(std::string* response);
  private:
  const std::string& _internal_response() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response(const std::string& value);
  std::string* _internal_mutable_response();
  public:

  // string errorMessage = 8;
  void clear_errormessage();
  const std::string& errormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_errormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_errormessage();
  PROTOBUF_NODISCARD std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // bytes notifyMsg = 9;
  void clear_notifymsg();
  const std::string& notifymsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notifymsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notifymsg();
  PROTOBUF_NODISCARD std::string* release_notifymsg();
  void set_allocated_notifymsg(std::string* notifymsg);
  private:
  const std::string& _internal_notifymsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notifymsg(const std::string& value);
  std::string* _internal_mutable_notifymsg();
  public:

  // fixed64 id = 2;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // .xrpc.MessageType type = 1;
  void clear_type();
  ::xrpc::MessageType type() const;
  void set_type(::xrpc::MessageType value);
  private:
  ::xrpc::MessageType _internal_type() const;
  void _internal_set_type(::xrpc::MessageType value);
  public:

  // .xrpc.ErrorCode error = 7;
  void clear_error();
  ::xrpc::ErrorCode error() const;
  void set_error(::xrpc::ErrorCode value);
  private:
  ::xrpc::ErrorCode _internal_error() const;
  void _internal_set_error(::xrpc::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:xrpc.RpcMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notifymsg_;
    uint64_t id_;
    int type_;
    int error_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_rpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SubScribeRequest

// bool isSubscribe = 1;
inline void SubScribeRequest::clear_issubscribe() {
  _impl_.issubscribe_ = false;
}
inline bool SubScribeRequest::_internal_issubscribe() const {
  return _impl_.issubscribe_;
}
inline bool SubScribeRequest::issubscribe() const {
  // @@protoc_insertion_point(field_get:xrpc.SubScribeRequest.isSubscribe)
  return _internal_issubscribe();
}
inline void SubScribeRequest::_internal_set_issubscribe(bool value) {
  
  _impl_.issubscribe_ = value;
}
inline void SubScribeRequest::set_issubscribe(bool value) {
  _internal_set_issubscribe(value);
  // @@protoc_insertion_point(field_set:xrpc.SubScribeRequest.isSubscribe)
}

// -------------------------------------------------------------------

// SubScribeResponse

// string subscribeResponse = 1;
inline void SubScribeResponse::clear_subscriberesponse() {
  _impl_.subscriberesponse_.ClearToEmpty();
}
inline const std::string& SubScribeResponse::subscriberesponse() const {
  // @@protoc_insertion_point(field_get:xrpc.SubScribeResponse.subscribeResponse)
  return _internal_subscriberesponse();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SubScribeResponse::set_subscriberesponse(ArgT0&& arg0, ArgT... args) {
 
 _impl_.subscriberesponse_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xrpc.SubScribeResponse.subscribeResponse)
}
inline std::string* SubScribeResponse::mutable_subscriberesponse() {
  std::string* _s = _internal_mutable_subscriberesponse();
  // @@protoc_insertion_point(field_mutable:xrpc.SubScribeResponse.subscribeResponse)
  return _s;
}
inline const std::string& SubScribeResponse::_internal_subscriberesponse() const {
  return _impl_.subscriberesponse_.Get();
}
inline void SubScribeResponse::_internal_set_subscriberesponse(const std::string& value) {
  
  _impl_.subscriberesponse_.Set(value, GetArenaForAllocation());
}
inline std::string* SubScribeResponse::_internal_mutable_subscriberesponse() {
  
  return _impl_.subscriberesponse_.Mutable(GetArenaForAllocation());
}
inline std::string* SubScribeResponse::release_subscriberesponse() {
  // @@protoc_insertion_point(field_release:xrpc.SubScribeResponse.subscribeResponse)
  return _impl_.subscriberesponse_.Release();
}
inline void SubScribeResponse::set_allocated_subscriberesponse(std::string* subscriberesponse) {
  if (subscriberesponse != nullptr) {
    
  } else {
    
  }
  _impl_.subscriberesponse_.SetAllocated(subscriberesponse, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.subscriberesponse_.IsDefault()) {
    _impl_.subscriberesponse_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xrpc.SubScribeResponse.subscribeResponse)
}

// -------------------------------------------------------------------

// RpcMessage

// .xrpc.MessageType type = 1;
inline void RpcMessage::clear_type() {
  _impl_.type_ = 0;
}
inline ::xrpc::MessageType RpcMessage::_internal_type() const {
  return static_cast< ::xrpc::MessageType >(_impl_.type_);
}
inline ::xrpc::MessageType RpcMessage::type() const {
  // @@protoc_insertion_point(field_get:xrpc.RpcMessage.type)
  return _internal_type();
}
inline void RpcMessage::_internal_set_type(::xrpc::MessageType value) {
  
  _impl_.type_ = value;
}
inline void RpcMessage::set_type(::xrpc::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:xrpc.RpcMessage.type)
}

// fixed64 id = 2;
inline void RpcMessage::clear_id() {
  _impl_.id_ = uint64_t{0u};
}
inline uint64_t RpcMessage::_internal_id() const {
  return _impl_.id_;
}
inline uint64_t RpcMessage::id() const {
  // @@protoc_insertion_point(field_get:xrpc.RpcMessage.id)
  return _internal_id();
}
inline void RpcMessage::_internal_set_id(uint64_t value) {
  
  _impl_.id_ = value;
}
inline void RpcMessage::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:xrpc.RpcMessage.id)
}

// string service = 3;
inline void RpcMessage::clear_service() {
  _impl_.service_.ClearToEmpty();
}
inline const std::string& RpcMessage::service() const {
  // @@protoc_insertion_point(field_get:xrpc.RpcMessage.service)
  return _internal_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMessage::set_service(ArgT0&& arg0, ArgT... args) {
 
 _impl_.service_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xrpc.RpcMessage.service)
}
inline std::string* RpcMessage::mutable_service() {
  std::string* _s = _internal_mutable_service();
  // @@protoc_insertion_point(field_mutable:xrpc.RpcMessage.service)
  return _s;
}
inline const std::string& RpcMessage::_internal_service() const {
  return _impl_.service_.Get();
}
inline void RpcMessage::_internal_set_service(const std::string& value) {
  
  _impl_.service_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_service() {
  
  return _impl_.service_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMessage::release_service() {
  // @@protoc_insertion_point(field_release:xrpc.RpcMessage.service)
  return _impl_.service_.Release();
}
inline void RpcMessage::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  _impl_.service_.SetAllocated(service, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.service_.IsDefault()) {
    _impl_.service_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xrpc.RpcMessage.service)
}

// string method = 4;
inline void RpcMessage::clear_method() {
  _impl_.method_.ClearToEmpty();
}
inline const std::string& RpcMessage::method() const {
  // @@protoc_insertion_point(field_get:xrpc.RpcMessage.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMessage::set_method(ArgT0&& arg0, ArgT... args) {
 
 _impl_.method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xrpc.RpcMessage.method)
}
inline std::string* RpcMessage::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:xrpc.RpcMessage.method)
  return _s;
}
inline const std::string& RpcMessage::_internal_method() const {
  return _impl_.method_.Get();
}
inline void RpcMessage::_internal_set_method(const std::string& value) {
  
  _impl_.method_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_method() {
  
  return _impl_.method_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMessage::release_method() {
  // @@protoc_insertion_point(field_release:xrpc.RpcMessage.method)
  return _impl_.method_.Release();
}
inline void RpcMessage::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  _impl_.method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.method_.IsDefault()) {
    _impl_.method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xrpc.RpcMessage.method)
}

// bytes request = 5;
inline void RpcMessage::clear_request() {
  _impl_.request_.ClearToEmpty();
}
inline const std::string& RpcMessage::request() const {
  // @@protoc_insertion_point(field_get:xrpc.RpcMessage.request)
  return _internal_request();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMessage::set_request(ArgT0&& arg0, ArgT... args) {
 
 _impl_.request_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xrpc.RpcMessage.request)
}
inline std::string* RpcMessage::mutable_request() {
  std::string* _s = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:xrpc.RpcMessage.request)
  return _s;
}
inline const std::string& RpcMessage::_internal_request() const {
  return _impl_.request_.Get();
}
inline void RpcMessage::_internal_set_request(const std::string& value) {
  
  _impl_.request_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_request() {
  
  return _impl_.request_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMessage::release_request() {
  // @@protoc_insertion_point(field_release:xrpc.RpcMessage.request)
  return _impl_.request_.Release();
}
inline void RpcMessage::set_allocated_request(std::string* request) {
  if (request != nullptr) {
    
  } else {
    
  }
  _impl_.request_.SetAllocated(request, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.request_.IsDefault()) {
    _impl_.request_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xrpc.RpcMessage.request)
}

// bytes response = 6;
inline void RpcMessage::clear_response() {
  _impl_.response_.ClearToEmpty();
}
inline const std::string& RpcMessage::response() const {
  // @@protoc_insertion_point(field_get:xrpc.RpcMessage.response)
  return _internal_response();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMessage::set_response(ArgT0&& arg0, ArgT... args) {
 
 _impl_.response_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xrpc.RpcMessage.response)
}
inline std::string* RpcMessage::mutable_response() {
  std::string* _s = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:xrpc.RpcMessage.response)
  return _s;
}
inline const std::string& RpcMessage::_internal_response() const {
  return _impl_.response_.Get();
}
inline void RpcMessage::_internal_set_response(const std::string& value) {
  
  _impl_.response_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_response() {
  
  return _impl_.response_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMessage::release_response() {
  // @@protoc_insertion_point(field_release:xrpc.RpcMessage.response)
  return _impl_.response_.Release();
}
inline void RpcMessage::set_allocated_response(std::string* response) {
  if (response != nullptr) {
    
  } else {
    
  }
  _impl_.response_.SetAllocated(response, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.response_.IsDefault()) {
    _impl_.response_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xrpc.RpcMessage.response)
}

// .xrpc.ErrorCode error = 7;
inline void RpcMessage::clear_error() {
  _impl_.error_ = 0;
}
inline ::xrpc::ErrorCode RpcMessage::_internal_error() const {
  return static_cast< ::xrpc::ErrorCode >(_impl_.error_);
}
inline ::xrpc::ErrorCode RpcMessage::error() const {
  // @@protoc_insertion_point(field_get:xrpc.RpcMessage.error)
  return _internal_error();
}
inline void RpcMessage::_internal_set_error(::xrpc::ErrorCode value) {
  
  _impl_.error_ = value;
}
inline void RpcMessage::set_error(::xrpc::ErrorCode value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:xrpc.RpcMessage.error)
}

// string errorMessage = 8;
inline void RpcMessage::clear_errormessage() {
  _impl_.errormessage_.ClearToEmpty();
}
inline const std::string& RpcMessage::errormessage() const {
  // @@protoc_insertion_point(field_get:xrpc.RpcMessage.errorMessage)
  return _internal_errormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMessage::set_errormessage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.errormessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xrpc.RpcMessage.errorMessage)
}
inline std::string* RpcMessage::mutable_errormessage() {
  std::string* _s = _internal_mutable_errormessage();
  // @@protoc_insertion_point(field_mutable:xrpc.RpcMessage.errorMessage)
  return _s;
}
inline const std::string& RpcMessage::_internal_errormessage() const {
  return _impl_.errormessage_.Get();
}
inline void RpcMessage::_internal_set_errormessage(const std::string& value) {
  
  _impl_.errormessage_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_errormessage() {
  
  return _impl_.errormessage_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMessage::release_errormessage() {
  // @@protoc_insertion_point(field_release:xrpc.RpcMessage.errorMessage)
  return _impl_.errormessage_.Release();
}
inline void RpcMessage::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  _impl_.errormessage_.SetAllocated(errormessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.errormessage_.IsDefault()) {
    _impl_.errormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xrpc.RpcMessage.errorMessage)
}

// bytes notifyMsg = 9;
inline void RpcMessage::clear_notifymsg() {
  _impl_.notifymsg_.ClearToEmpty();
}
inline const std::string& RpcMessage::notifymsg() const {
  // @@protoc_insertion_point(field_get:xrpc.RpcMessage.notifyMsg)
  return _internal_notifymsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RpcMessage::set_notifymsg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.notifymsg_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:xrpc.RpcMessage.notifyMsg)
}
inline std::string* RpcMessage::mutable_notifymsg() {
  std::string* _s = _internal_mutable_notifymsg();
  // @@protoc_insertion_point(field_mutable:xrpc.RpcMessage.notifyMsg)
  return _s;
}
inline const std::string& RpcMessage::_internal_notifymsg() const {
  return _impl_.notifymsg_.Get();
}
inline void RpcMessage::_internal_set_notifymsg(const std::string& value) {
  
  _impl_.notifymsg_.Set(value, GetArenaForAllocation());
}
inline std::string* RpcMessage::_internal_mutable_notifymsg() {
  
  return _impl_.notifymsg_.Mutable(GetArenaForAllocation());
}
inline std::string* RpcMessage::release_notifymsg() {
  // @@protoc_insertion_point(field_release:xrpc.RpcMessage.notifyMsg)
  return _impl_.notifymsg_.Release();
}
inline void RpcMessage::set_allocated_notifymsg(std::string* notifymsg) {
  if (notifymsg != nullptr) {
    
  } else {
    
  }
  _impl_.notifymsg_.SetAllocated(notifymsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.notifymsg_.IsDefault()) {
    _impl_.notifymsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:xrpc.RpcMessage.notifyMsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace xrpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::xrpc::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xrpc::MessageType>() {
  return ::xrpc::MessageType_descriptor();
}
template <> struct is_proto_enum< ::xrpc::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::xrpc::ErrorCode>() {
  return ::xrpc::ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
